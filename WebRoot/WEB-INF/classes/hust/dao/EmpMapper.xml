<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper  
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace属性是名称空间，具有唯一性，理论上可随意命名 -->
<mapper namespace="hust.bean.Emp">
	<!-- resultMap标签：映射实体与表
	     type属性：实体全路径
	     id属性：实体与表映射的唯一标号
	 -->
	<resultMap type="Emp" id="empMap">
		<!-- id标签：映射主键属性
		     result标签：映射非主键属性
		     property属性：实体的属性名
		     column属性：表的字段名
		 -->
		<id property="id" column="c_id" />
		<result property="name" column="c_name"/>
		<result property="birth" column="c_birth"/>
		<result property="phone" column="c_phone"/>
	</resultMap>

	<insert id="addEmp1">
		insert into t_emp(c_id, c_name, c_birth, c_phone)
			values(1, 'britar', '1991', '131')
	</insert>
	
	<!-- id属性：插入sql的唯一标识符；
	     parameterType属性：要执行的dao中的方法的参数，如果是实体类的话，必须使用全路径类（这里采用了别名的方式）
	     #{property}：自动通过类的getProperty的方法获取对应的属性值
	 -->
	<insert id="addEmp2" parameterType="Emp">
		insert into t_emp(c_id, c_name, c_birth, c_phone)
			values(#{id}, #{name}, #{birth}, #{phone}) 
	</insert>
	
	<!-- 如果参数不是一个实体对象，只是一个普通变量，例如int,double,String等，那么这里的#{中间变量名可以随便写，不过提倡使用方法的形参名} -->
	<select id="findById" parameterType="int" resultMap="empMap">
		select c_id, c_name, c_birth, c_phone
		from t_emp
		where c_id=#{id}
	</select>
	
	<!-- 即使返回的是一个集合类型，但是返回类型依然写集合中元素的类型，特别是在使用resultType属性时要注意 -->
	<select id="findAll" resultMap="empMap">
		select c_id, c_name, c_birth, c_phone
		from t_emp
	</select>
	
	<update id="update" parameterType="Emp">
		update t_emp 
		set c_birth=#{birth}
		where c_id=#{id}
	</update>
	
	<delete id="delete" parameterType="Emp">
		delete from t_emp
		where c_id=#{id}
	</delete>
	
	<!-- map类型是Mybatis对应到Java双列集合的类型 -->
	<select id="findAllWithFY" parameterType="map" resultMap="empMap">
		select c_id, c_name, c_birth, c_phone
		from t_emp
		where c_name like #{pname}
		limit #{pstart}, #{pcount}   <!-- 自动从map中取值 -->
	</select>
</mapper>